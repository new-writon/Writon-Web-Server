name: Writon Nodejs(TypeScript) CI with NPM and CD with Docker & AWS EC2

on:
  push:
    branches: ['develop']

  pull_request:
    branches: ['develop']

permissions:
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      # 소스코드 다운로드
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # 또는 프로젝트에 맞는 Node.js 버전

      # NPM 종속성 설치
      - name: Install dependencies
        run: npm install

      # FIREBASE SDK 세팅
      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: 'writon-firebase-admin.json'
          json: ${{ secrets.FIREBASE }}

      # 빌드
      - name: Build
        run: npm run build

      # 린팅
      - name: Run Lint
        run: npm run lint # package.json에 정의된 lint 스크립트 실행

      # # 보안 검사 (예: npm audit)
      # - name: Run Security Audit
      #   run: npm audit --production --audit-level=high # 높은 수준의 취약점 검사

  CD:
    needs: CI
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      # 소스코드 다운로드
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # 또는 프로젝트에 맞는 Node.js 버전

      # ENV SDK 세팅
      - name: Setting env file
        run: |
          touch .env
          echo "${{ secrets.ENVTEST }}" >> .env
        shell: bash

      # FIREBASE SDK 세팅
      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: 'writon-firebase-admin.json'
          json: ${{ secrets.FIREBASE }}

      - name: Log in to GHCR with PAT
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/writon-test:1.0 -f Dockerfile .
          docker push ghcr.io/${{ github.repository_owner }}/writon-test:1.0

      # 서버에서 Docker 이미지 실행
      - name: EC2 Docker Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |

            docker stop writon-test
            docker rm writon-test
            docker rmi ghcr.io/${{ github.repository_owner }}/writon-test:1.0
            docker pull ghcr.io/${{ github.repository_owner }}/writon-test:1.0
            docker run -d -p 86:3003 --name writon-test ghcr.io/${{ github.repository_owner }}/writon-test:1.0
